@page "/my-documents"
@rendermode InteractiveWebAssembly

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h4" GutterBottom="true">My Documents</MudText>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-bottom: 2.5rem;">
    <div style="margin-inline: 1.6rem; margin-bottom: 1.5rem;">
    <MudTextField @bind-Value="searchQuery"
                  Placeholder="Search documents..."
                  Variant="Variant.Outlined"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mt-4 w-100"/>
    </div>

    @if (filteredDocuments.Any())
    {
        <div class="grid-container">
            @foreach (var (doc, index) in filteredDocuments.Select((doc, i) => (doc, i)))
            {
                <MudPaper Class="d-flex position-relative">
                    <div class="d-flex flex-column" style="width: 100%;">
                        <div class="bg-body-secondary d-flex justify-content-center align-items-center p-4">
                            <MudIcon Style="font-size: 15rem;" Icon="@Icons.Material.Filled.InsertDriveFile" Size="Size.Large" Class="mud-icon-size-large"/>
                        </div>

                        <div class="pa-4" style="text-align: left;">
                            <MudText Class="fw-bold" Typo="Typo.body1">@doc.Title</MudText>
                            <div class="d-flex align-items-center justify-content-between mt-1">
                                <div class="d-flex gap-1">
                                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small"/>
                                    <MudText Typo="Typo.body2">@doc.Date.ToString("dd.MM.yyyy")</MudText>
                                </div>

                                <MudIconButton
                                    Color="Color.Default" Size="Size.Small"
                                    Icon="@Icons.Material.Filled.MoreVert"
                                    OnClick="@(() => OpenOverlay(index))"/>
                            </div>
                        </div>
                    </div>
                </MudPaper>
            }
        </div>
    }
    else
    {
        <div class="d-flex flex-column justify-center align-center text-center" style="height: 50vh;">
            <MudIcon Icon="@Icons.Material.Filled.FolderOff" Size="Size.Large" Color="Color.Default" Class="mb-4" Style="font-size: 4rem; opacity: 0.5;"/>
            <MudText Typo="Typo.h5" Class="mb-2">No documents</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">No matching documents found.</MudText>
        </div>
    }
</MudContainer>

@if (openOverlayIndex is not null)
{
    <MudOverlay Visible="true" DarkBackground="true" Class="d-flex justify-center align-center">
        <MudPaper Class="p-3" Style="min-width: 16rem;">
            <div>
                <MudText Typo="Typo.h6" Class="mb-2">Choose an action</MudText>
            </div>

            <MudButton
                Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.Download"
                DropShadow="false"
                OnClick="@(() => OnDownload(openOverlayIndex.Value))"
                Class="w-100 mb-2">
                Download
            </MudButton>

            <MudButton
                Variant="Variant.Filled" Color="Color.Error"
                StartIcon="@Icons.Material.Filled.Delete"
                DropShadow="false"
                OnClick="@(() => OnDelete(openOverlayIndex.Value))"
                Class="w-100">
                Delete
            </MudButton>

            <MudButton
                Variant="Variant.Text"
                OnClick="@CloseOverlay"
                Class="mt-2 w-100">
                Cancel
            </MudButton>
        </MudPaper>
    </MudOverlay>
}

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));
        gap: 1rem;
        justify-content: center;
        padding-inline: 1.6rem;
    }
</style>

@code {
    private string searchQuery = string.Empty;

    private List<DocumentItem> documents = new()
    {
        new DocumentItem { Title = "Declaration on own responsibility", Date = new DateTime(2025, 10, 3) },
        new DocumentItem { Title = "Farm registration certificate", Date = new DateTime(2025, 10, 3) },
        new DocumentItem { Title = "Proof of land rights", Date = new DateTime(2025, 10, 3) },
        new DocumentItem { Title = "Project plan / technical design + budget", Date = new DateTime(2025, 10, 3) },
        new DocumentItem { Title = "Bank guarantee or performance commitment", Date = new DateTime(2025, 10, 3) },
        new DocumentItem { Title = "Certificate of putting into operation", Date = new DateTime(2025, 10, 1) },
        new DocumentItem { Title = "Invoices", Date = new DateTime(2025, 10, 1) },
        new DocumentItem { Title = "Proof of payment", Date = new DateTime(2025, 10, 1) },
    };

    private IEnumerable<DocumentItem> filteredDocuments =>
        documents.Where(d => string.IsNullOrWhiteSpace(searchQuery) ||
                             d.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    private int? openOverlayIndex = null;

    private void OpenOverlay(int index) => openOverlayIndex = index;
    private void CloseOverlay() => openOverlayIndex = null;

    private void OnDownload(int index)
    {
        Console.WriteLine($"Download document {filteredDocuments.ElementAt(index).Title}");
        CloseOverlay();
    }

    private void OnDelete(int index)
    {
        Console.WriteLine($"Delete document {filteredDocuments.ElementAt(index).Title}");
        CloseOverlay();
    }

    private class DocumentItem
    {
        public required string Title { get; set; }
        public DateTime Date { get; set; }
    }
}

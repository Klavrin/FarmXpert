@rendermode InteractiveWebAssembly
@inject HttpClient Http

<MudPaper Class="w-100">
    <MudStepper>
        <ChildContent>
            <MudStep Title="Upload certificates" Style="padding-top: 1.5rem;">
                <div class="d-flex flex-column flex-lg-row justify-content-between align-items-start align-items-sm-center gap-3">
                    <MudText Class="text-nowrap mb-2 mb-sm-0" Typo="Typo.body1">Upload Certificate of Registration</MudText>
                    <div class="bg-body-secondary line d-none d-lg-block" style="min-height: 2px; width: 100%;"></div>
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton
                                Style="width: max-content"
                                Variant="Variant.Filled"
                                Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Certificate
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                </div>
            </MudStep>

            <MudStep Title="Add farm details" Class="d-flex flex-column gap-1">
                
                <MudTextField T="string" Label="Farm Name"/>
                <MudTextField T="string" Label="Farm Location"/>
                <MudTextField T="string" Label="IDNO"/>
                <MudDatePicker Label="Date of Registration" @bind-Date="_date" Style="margin-bottom: 1.5rem;"/>
            </MudStep>

            <MudStep Title="Add crops" Class="d-flex flex-column gap-2" SecondaryText="If applicable" Skippable="true">
                <MudText Class="fw-bold" Typo="Typo.body1">Land parcel:</MudText>
                <MudTextField T="string" Label="Size" @bind-Value="_landParcel.Size"/>
                <MudTextField T="string" Label="Location" @bind-Value="_landParcel.Location"/>

                <MudText Class="fw-bold mt-4" Typo="Typo.body1">Crop types:</MudText>
                @foreach (var crop in _crops)
                {
                    <MudPaper Class="p-3 mb-2" Style="border: 1px solid #ccc; border-radius: 8px;">
                        <div class="d-flex flex-column gap-2">
                            <MudTextField T="string" Label="Crop Type" @bind-Value="crop.Type"/>
                            <MudTextField T="string" Label="Cultivated Area" @bind-Value="crop.CultivatedArea"/>
                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RemoveCrop(crop)">
                                Remove
                            </MudButton>
                        </div>
                    </MudPaper>
                }

                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddCrop">
                    Add Another Crop
                </MudButton>

                <MudText Class="fw-bold mt-4" Typo="Typo.body1">Agricultural Practice:</MudText>
                <MudTextField Style="margin-bottom: 1.5rem;" T="string" Label="Agricultural Practice" @bind-Value="_agriculturalPractice"/>
            </MudStep>

            <MudStep Title="Add livestock" SecondaryText="If applicable" Skippable="true">
                <MudText Class="fw-bold" Typo="Typo.body1">Animal Types:</MudText>

                @foreach (var animal in _livestock)
                {
                    <MudPaper Class="p-3 mb-2" Style="border: 1px solid #ccc; border-radius: 8px;">
                        <div class="d-flex flex-column gap-2">
                            <MudTextField T="string" Label="Animal Type" @bind-Value="animal.Type"/>
                            <MudTextField T="string" Label="Num. of Animals" @bind-Value="animal.Count"/>
                            <MudTextField T="string" Label="Herd Book Number" @bind-Value="animal.HerdBookNumber"/>
                            <MudTextField T="string" Label="Production Type" @bind-Value="animal.ProductionType"/>

                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RemoveAnimal(animal)">
                                Remove
                            </MudButton>
                        </div>
                    </MudPaper>
                }

                <MudButton Class="w-100" Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddAnimal">
                    Add Another Animal
                </MudButton>

                <MudTextField T="string" Label="Herd Book Number" @bind-Value="_landParcel.Size"/>
                <MudTextField T="string" Label="Production Type" @bind-Value="_landParcel.Size" Style="margin-bottom: 1.5rem;"/>
            </MudStep>

            <MudStep Title="Add insurances" SecondaryText="If applicable" Skippable="true" Class="d-flex flex-column gap-2">
                <MudText Class="fw-bold" Typo="Typo.body1">Insurance Documents:</MudText>

                @foreach (var insurance in _insurances)
                {
                    <MudPaper Class="p-3 mb-2" Style="border: 1px solid #ccc; border-radius: 8px;">
                        <div class="d-flex flex-column gap-2">
                            <MudTextField T="string" Label="Insurance Type" @bind-Value="insurance.Type"/>
                            <MudTextField T="string" Label="Coverage Amount" @bind-Value="insurance.CoverageAmount"/>
                            <MudDatePicker Label="Expiry Date" @bind-Date="insurance.ExpiryDate"/>

                            <MudFileUpload T="IBrowserFile" FilesChanged="files => UploadInsuranceDocument(files, insurance)">
                                <ActivatorContent>
                                    <MudButton Class="w-100" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Upload Insurance Document
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>

                            @if (insurance.Documents.Count > 0)
                            {
                                <MudList T="string">
                                    @foreach (var doc in insurance.Documents)
                                    {
                                        <MudListItem T="string">@doc.Name</MudListItem>
                                    }
                                </MudList>
                            }

                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RemoveInsurance(insurance)">
                                Remove
                            </MudButton>
                        </div>
                    </MudPaper>
                }

                <MudButton Class="w-100" Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddInsurance" Style="padding-bottom: 1.5rem;">
                    Add Another Insurance
                </MudButton>
            </MudStep>
        </ChildContent>
        <CompletedContent >
            <MudStack Row Class="ma-3">
                <MudIcon Icon="@Icons.Material.Filled.Done" Color="Color.Success"/>
                <MudText>
                    Profile setup is complete! You can now activate your account.
                    
                    <MudButton OnClick="ActivateAccount">Activate Account</MudButton>
                </MudText>
            </MudStack>
        </CompletedContent>
    </MudStepper>
</MudPaper>

@code {
    private DateTime? _date = DateTime.Today;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private LandParcel _landParcel = new();
    private List<Crop> _crops = new();
    private List<Animal> _livestock = new();
    private List<Insurance> _insurances = new();
    private string _agriculturalPractice = "";

    private bool _certificatesStepVisited = false;

    private async Task ActivateAccount()
    {
        var model = new User()
        {
            ProfileSetupCompleted = true,
        };
        
        var response = await Http.PostAsJsonAsync("api/users/complete-profile-setup", model);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            Console.WriteLine("Success: " + result["message"]);
        }
        else
        {
            Console.WriteLine("Error: " + response.StatusCode);
        } 
    }

    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        //TODO: upload the files to the server
    }

    private void AddCrop() => _crops.Add(new Crop());
    private void RemoveCrop(Crop crop) => _crops.Remove(crop);

    private void AddAnimal() => _livestock.Add(new Animal());
    private void RemoveAnimal(Animal animal) => _livestock.Remove(animal);

    private void AddInsurance() => _insurances.Add(new Insurance());
    private void RemoveInsurance(Insurance insurance) => _insurances.Remove(insurance);

    private void UploadInsuranceDocument(IBrowserFile file, Insurance insurance)
    {
        insurance.Documents.Add(file);
        // TODO: upload to server
    }

    public class LandParcel
    {
        public string Size { get; set; } = "";
        public string Location { get; set; } = "";
    }

    public class Crop
    {
        public string Type { get; set; } = "";
        public string CultivatedArea { get; set; } = "";
    }

    public class Animal
    {
        public string Type { get; set; } = "";
        public string Count { get; set; } = "";
        public string HerdBookNumber { get; set; } = "";
        public string ProductionType { get; set; } = "";
    }

    public class Insurance
    {
        public string Type { get; set; } = "";
        public string CoverageAmount { get; set; } = "";
        public DateTime? ExpiryDate { get; set; }
        public List<IBrowserFile> Documents { get; set; } = new();
    }

    public class User
    {
        public bool ProfileSetupCompleted { get; set; }
    }
}
